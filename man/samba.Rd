% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mutate.R
\name{salsa}
\alias{salsa}
\alias{chacha}
\alias{samba}
\alias{madison}
\title{Mutate new columns}
\usage{
salsa(.tbl, ..., .env = caller_env())

chacha(.tbl)

samba(.tbl, ..., .env = caller_env())

madison(.tbl, ..., .name = "data", .env = caller_env())
}
\arguments{
\item{.tbl}{A data frame, most likely a grouped data frame}

\item{..., .env}{formulas for each column to create, and parent environment, see \code{\link[=ballet]{ballet()}}}

\item{.name}{Name of the packed column made by \code{charleston()}

The four functions play a separate role around the idea of
\code{\link[dplyr:mutate]{dplyr::mutate()}}:
\itemize{
\item \code{chacha()} reorganizes the rows of a grouped data frame so that data for each
group is contiguous in each column.
\item \code{salsa()} runs the \code{\link[=ballet]{ballet()}} defined by \code{...} and makes
sure the \code{\link[vctrs:vec_size]{vctrs::vec_size()}} of each result is equal to the number
of elements in that group. The result tibble of \code{salsa()}
does not contain the grouping variables, just those columns specified
by the \code{...}.
\item \code{samba()} is the closest to \code{\link[dplyr:mutate]{dplyr::mutate()}}, it column binds
the result of \code{chacha()} and \code{salsa()} with \code{\link[vctrs:vec_cbind]{vctrs::vec_cbind()}}.
\item \code{madison()} is similar to \code{sambda()} but the results are packed
instead of being \code{[vctrs::vec_cbind()]}. The name of the created packed column is
controled by the \code{.name} argument.
}}
}
\description{
Applies the \code{\link[=ballet]{ballet()}} and makes sure each result have the same \code{\link[vctrs:vec_size]{vctrs::vec_size()}}
as the number of elements in each group.
}
\examples{
g <- group_by(iris, Species)

# Creates a `dance_grouped_df` tibble,
# which is the same as `g` but guarantees that the data for each column
# is contiguous within groups
chacha(g)

# returns a tibble of two columns
g \%>\%
  salsa(
    Sepal = ~Sepal.Length * Sepal.Width,
    Petal = ~Petal.Length * Petal.Width
  )

# returns a dance_grouped_df with the two
# additional columns `Sepal` and `Petal`
g \%>\%
  samba(
    Sepal = ~Sepal.Length * Sepal.Width,
    Petal = ~Petal.Length * Petal.Width
  )

# returns a dance_grouped_df with the one
# additional data frame column
g \%>\%
  madison(
    Sepal = ~Sepal.Length * Sepal.Width,
    Petal = ~Petal.Length * Petal.Width
  )

}
